AWSTemplateFormatVersion: 2010-09-09
Description: Auto scaling nested stack template

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The public subnet that the instance will be launched into

  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI of the web server instance

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets that the auto scaling group will span

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group that will be attached to the instances

  TargetGroupARN:
    Type: String
    Description: The ARN of the load balancer target group the instances will be registered to

  DBStringParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'DBConString'

  ALBRequestCountTargetValue:
    Type: Number
    Default: 100
    Description: The optimal average request count per instance during any one-minute interval

  TargetGroupFullName:
    Type: String
    Description: Fullname of the target group ALBRequestCountScalingPolicy

  LoadBalancerFullName:
    Type: String
    Description: Fullname of the load balancer for ALBRequestCountScalingPolicy

Resources:
  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: Name
          Value: PhoenixFileSystem4
      KmsKeyId: !Ref KMSkey 
  
  KMSkey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: 
              - '*'

  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref SubnetId
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        CidrIp: 0.0.0.0/0

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebServerRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Ref ImageId
        KeyName: phoenix
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-WebServer'
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              yum update -y
              yum install -y aws-cfn-bootstrap
              # install git
              yum install git -y
              # install docker
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -a -G docker ec2-user
              # uninstall aws cli version 1
              rm -rf /bin/aws
              # install aws cli version 2
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              # install python 3
              yum install python3 -y
              # install mongo daemon
              cd /etc/yum.repos.d/
              echo -e "[mongodb-org-6.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/6.0/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc" >> mongodb-org-6.0.repo            
              yum install -y mongodb-org
              systemctl start mongod
              systemctl status mongod
              systemctl enable mongod
              # Install Nodejs14x
              yum install -y curl
              curl -fsSL https://rpm.nodesource.com/setup_14.x | sudo bash -
              yum install -y nodejs
              # install build tools
              yum install -y gcc-c++ make
              # Configuration for EFS automount
              export FILE_SYS_ID=${FileSystemId}
              export EFS_MOUNT_POINT=${EFSMountPoint}
              echo $FILE_SYS_ID | echo $EFS_MOUNT_POINT
              echo "FILE_SYS_ID:/ EFS_MOUNT_POINT efs _netdev,noresvport,tls,iam 0 0" >> etc/fstab
              # clone app and install npm dependencies
              cd /home/ec2-user/
              git clone https://github.com/Raptorex65/cloud-phoenix-kata.git
              cd cloud-phoenix-kata
              export DB_CONNECTION_STRING="${DBString}"
              npm install
              npm start
              /opt/aws/bin/cfn-signal -s true --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
            - DBString: !Ref DBStringParam
              FileSystemId: !Ref FileSystemResource
              EFSMountPoint: !Ref MountTarget

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy: # wait up to 15 minutes to receive a success signal during instance startup
      ResourceSignal:
        Timeout: PT15M
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier: !Ref Subnets
      MinSize: "2"
      MaxSize: "4"
      DesiredCapacity: "2"
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref TargetGroupARN
      HealthCheckGracePeriod: 300

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '600'
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 90
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down, so we can add instances
      Period: 60
      AlarmActions:
        - !Ref ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 40
      AlarmDescription: Alarm if CPU too low, so we can decrease instances gracefully
      Period: 60
      AlarmActions:
        - !Ref ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  ALBRequestCountScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !Ref LoadBalancerFullName
              - !Ref TargetGroupFullName
        TargetValue: !Ref ALBRequestCountTargetValue