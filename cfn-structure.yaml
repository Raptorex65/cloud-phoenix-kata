AWSTemplateFormatVersion: 2010-09-09
Description: Web server stack template for the Phoenix App Resources

Parameters:
  DBStringParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'DBConString'

  ALBRequestCountTargetValue:
    Type: Number
    Default: "100"
    Description: The optimal average request count per instance during any one-minute interval

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 11.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  
  # Route tables ---
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Description: A route table that has a route to the Internet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Description: A route table that does not have a route to the Internet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRouteTable'

  # Subnets ---
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 11.0.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'

  PublicSubnet1RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 11.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet2'

  PublicSubnet2RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 11.0.2.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet1'

  PrivateSubnet1RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 11.0.3.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet2'

  PrivateSubnet2RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security groups ---
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: 'Security group for load balancers'
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: '0.0.0.0/0'
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: '0.0.0.0/0'      
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerSG'

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: 'Security group for web server instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: '0.0.0.0/0'
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 3000
          ToPort: 3000
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServerSG'

  MountTargetSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref Vpc
        GroupDescription: Security group for mount target
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0

  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      AvailabilityZoneName: !GetAtt PublicSubnet1.AvailabilityZone
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
        - Key: Name
          Value: PhoenixEFS
      KmsKeyId: !Ref KMSkey 
  
  KMSkey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - 'kms:*'
            Resource: 
              - '*'

  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref PublicSubnet1
      SecurityGroups:
      - !Ref MountTargetSecurityGroup

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      IpAddressType: ipv4

  ALBDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: cloudbundle.net.
      Comment: Zone apex alias targeted to ALBDNSRecord LoadBalancer.
      RecordSets:
      - Name: phoenix.cloudbundle.net.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: 3000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: '3000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - 
          Key: 'deregistration_delay.timeout_seconds'
          Value: "10"
      Tags:
        - Key: Name
          Value: 'target-group'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-0fe472d8a85bc7b0e
        KeyName: phoenix
        SecurityGroupIds: 
          - !Ref WebServerSecurityGroup
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: !Sub '${AWS::StackName}-WebServer'
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              yum update -y
              # install git
              yum install git -y
              # install docker
              amazon-linux-extras install docker -y
              systemctl start docker
              systemctl enable docker
              usermod -a -G docker ec2-user
              # uninstall aws cli version 1
              rm -rf /bin/aws
              # install aws cli version 2
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              # install python 3
              yum install python3 -y
              # install mongo daemon
              cd /etc/yum.repos.d/
              echo -e "[mongodb-org-6.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/6.0/x86_64/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc" >> mongodb-org-6.0.repo            
              yum install -y mongodb-org
              systemctl start mongod
              systemctl status mongod
              systemctl enable mongod
              # Install Nodejs14x
              yum install -y curl
              curl -fsSL https://rpm.nodesource.com/setup_14.x | sudo bash -
              yum install -y nodejs
              # install build tools
              yum install -y gcc-c++ make
              # Configuration for EFS
              cd /home/ec2-user/
              mkdir efs
              sudo chown ec2-user:ec2-user efs
              sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport "${FileSystemId}".efs.us-east-1.amazonaws.com:/ efs
              mkdir efs/logs efs/data
              sed 's|/var/log/mongodb|/home/ec2-user/efs/logs|g' /etc/mongod.conf
              sed 's|/var/lib/mongo|/home/ec2-user/efs/data|g' /etc/mongod.conf
              # clone app and install npm dependencies
              cd /home/ec2-user/
              git clone https://github.com/Raptorex65/cloud-phoenix-kata.git
              cd cloud-phoenix-kata
              export DB_CONNECTION_STRING="${DBString}"
              npm install
              npm start
            - DBString: !Ref DBStringParam
              FileSystemId: !GetAtt FileSystemResource.FileSystemId

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      MinSize: "2"
      MaxSize: "4"
      DesiredCapacity: "2"
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckGracePeriod: 300

  ALBRequestCountScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt TargetGroup.TargetGroupFullName
        TargetValue: !Ref ALBRequestCountTargetValue

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - AutoScalingGroup
    Properties:
      EvaluationPeriods: 5
      Statistic: Average
      Threshold: 40
      AlarmDescription: Alarm if CPU too low, so we can decrease instances gracefully
      Period: 60
      AlarmActions:
        - !Ref ScaleDownPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the application load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

